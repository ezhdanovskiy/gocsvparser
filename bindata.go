// Code generated by go-bindata.
// sources:
// assets/js/app.jsx
// DO NOT EDIT!

// +build builtinassets

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsJsAppJsx = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x0c\xdb\x8b\x5d\x12\xe9\xde\xb5\x7d\x69\x28\x6c\x49\x68\xc9\x1e\x4b\x0f\x8a\x35\xed\x8a\x7a\x25\x47\x1a\x2f\x59\x8c\xfe\x7b\xd1\x87\x3f\x12\x4a\xea\x93\xdf\x63\x34\x6f\xde\xcc\xe3\x1c\x6e\x3f\xde\xc2\x57\x71\x11\xc7\xce\xaa\x81\x02\x2c\x8a\xa2\xeb\x85\x73\xf0\x1d\xad\x33\xfa\x40\x78\x06\x7c\x21\xd4\xd2\xc1\x23\x8a\x8e\xd8\x67\x73\x1e\x8c\x46\x4d\x30\x15\x00\x16\xb5\x44\x5b\x56\x11\x04\x48\xa3\xd5\x50\x46\x00\x50\x93\x6d\xf3\x6f\x00\xb2\x85\x89\x4e\xca\xb1\xc1\x9a\xc1\x31\x25\x7d\xe4\x39\xc9\x77\xaa\x7e\x29\xeb\xc8\xff\xaf\xaa\x17\xa1\xe8\x55\x55\xcd\x67\xf5\x6a\x5f\x00\xf8\xc2\xaf\xde\xcc\xd0\xe3\xbd\x72\xf4\xae\xb7\xce\x68\x47\x76\xec\xc8\xd8\x32\xaa\xcc\x2e\xdd\x38\xe0\x4c\xed\x23\x13\x27\x71\x24\x08\xa1\x81\x09\x86\x28\xf0\x09\x7e\xfc\x04\x9f\xb4\x63\xbb\xdc\xfc\x4e\xc9\x07\x33\x6a\x5a\xb6\x96\x5e\xa3\xbd\xa0\x7d\xc4\xe7\x11\x1d\x41\x93\x4d\x88\x17\x65\xdc\x62\x9b\xfd\x46\x2a\x77\x3c\xb5\xdf\x55\x2b\x4f\x27\xd4\x65\x69\xd1\x8d\x3d\x55\xd0\xb4\xb9\x71\xfe\x72\x7f\x3a\x86\x01\xcb\x75\xbc\x54\xcf\xa4\x20\x01\x3e\x3b\x09\x9f\xaf\x96\xa1\xdf\xdc\x37\xae\x24\xbf\x87\x66\x63\x9b\x25\x8e\x9d\xc5\x50\x96\x43\xcc\xce\x0d\xa8\x57\xa3\xbc\xc9\x06\x40\xbd\xc9\xd8\x1f\xbc\x36\x93\xf2\xa0\x64\x33\xa5\xe7\xec\x20\x3d\xc4\xe3\x2f\xcc\x97\x14\x85\x70\xeb\x85\xbb\x8f\x87\xe7\xf3\xd1\xb3\x8b\xe0\xe0\x9f\x81\x94\xea\xb2\x4d\x91\x78\xea\xb1\xad\xe9\xc9\xc8\x6b\xbb\xd9\x58\xc8\x6d\x4d\xa7\xf6\x20\x6b\x4e\xa7\xf8\x1b\xb5\x17\x14\x54\x13\xe0\xdb\x88\x03\x4c\x69\x0f\x7e\xd5\xe0\xa9\x7b\xcd\x93\x58\xb1\xa4\x73\x19\x65\x8d\x67\x4c\xe1\xdd\xb7\x07\x96\xd7\x1e\x56\x34\x47\x95\xb7\x37\x20\x4d\x37\x9e\x51\x13\x7b\x1e\xd1\x5e\x8f\xd8\x63\x0c\xe7\xee\x83\x35\x86\x76\x55\xb5\x2f\xfe\x06\x00\x00\xff\xff\xe1\xf0\x80\x19\xd5\x03\x00\x00")

func assetsJsAppJsxBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAppJsx,
		"assets/js/app.jsx",
	)
}

func assetsJsAppJsx() (*asset, error) {
	bytes, err := assetsJsAppJsxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/app.jsx", size: 981, mode: os.FileMode(420), modTime: time.Unix(1515108496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/js/app.jsx": assetsJsAppJsx,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"app.jsx": &bintree{assetsJsAppJsx, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

