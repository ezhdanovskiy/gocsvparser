// Code generated by go-bindata.
// sources:
// assets/js/app.jsx
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsJsAppJsx = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\xa3\xf4\x02\xd5\x2e\xbe\x37\xc0\x65\x73\x69\xa5\x55\xa5\xcd\xb1\xaa\x2a\xaf\x19\x6d\xac\x06\x9b\xb5\x87\x68\x23\xc4\xbf\x57\x36\x8e\x21\x10\x35\xcb\x29\x63\x3f\xbf\x79\x33\xf3\x26\x8c\xc1\xe3\xd7\x47\xf8\xc1\x4f\x7c\x2f\x8c\x6c\xc9\x85\x49\x92\x88\x23\xb7\x16\x76\x52\x90\xd4\x8a\x9b\xf3\x77\xc2\x06\xf0\x83\x50\xd5\x16\x5e\x90\x0b\xca\x9f\x74\xd3\x6a\x85\x8a\xa0\x4f\x00\x0c\xaa\x1a\x4d\x9a\xf9\xc0\x85\xd4\x19\x05\xa9\x0f\x00\x0a\x32\x55\xf8\xe9\x82\xba\x82\x9e\x0e\xd2\xe6\xad\xd1\xad\xcd\xad\xee\x8c\xc0\x3f\x82\x13\xbe\x69\x73\x1e\x3c\x88\x51\xfd\x89\x27\x5a\x91\xe1\x82\xb4\x19\xee\xbd\x98\xb1\xdf\x43\xce\x48\xef\x63\x9b\x06\x15\x2d\x80\x05\xbb\xd4\x9b\x6d\x13\x80\x21\x19\xd6\x1d\xfd\x6f\x37\x85\x56\x96\x4c\xe7\x34\xa4\x3e\xd1\xa5\xaf\xb6\x6b\xf1\x72\xb4\xf5\x27\x5e\x8c\x25\x4e\x08\x25\xf4\x50\xc7\x04\xdf\xe0\xd7\x6f\x18\xc6\xfc\x9e\x32\x24\xd8\xc9\xfa\x59\x77\x8a\xe2\xac\x46\x06\x34\x27\x34\x2f\xf8\xde\xa1\x25\x28\x43\x21\xfc\x43\x6a\x1b\xab\xcf\xdf\x90\xd2\x0d\x9b\x52\x6c\xb2\xe9\x8e\x0e\xa8\xd2\xd4\xa0\xed\x8e\x94\x41\x59\x05\xf2\xf0\x85\x1c\xb4\x77\x42\xd3\x6b\x99\xe3\x9b\xbc\xe6\xc4\x61\x08\x55\xb9\x6f\xc8\xa2\xf8\x85\xbb\x7c\x7b\x66\x1c\x50\xce\xda\x90\x4f\xe7\x79\xc3\xdb\x34\x95\x84\xcd\x03\xc8\x2b\x51\x0b\x7f\x02\x14\x0b\xaf\xff\xc5\x73\xd9\xcb\x21\xde\x2f\x3c\x5a\xf6\x8e\x35\xd8\xf0\xe9\x62\xad\x15\x3a\x3a\xe9\x1a\x3f\x19\x2c\xbe\x58\x10\x8b\x15\xe5\x8a\x4b\xdc\x62\x19\xed\x18\x11\xc1\x9c\xec\x62\xcc\xd0\x5d\xd7\xd9\x9b\x6b\x5a\xcb\xd3\xdc\xec\xfc\xf5\x88\x55\x41\xaf\xba\x3e\x57\xb3\x69\xba\x6d\x2e\xe8\x50\xed\xaf\xaa\x2f\x18\x1d\xe6\xc7\x51\x5e\xbc\x58\x21\x6f\x61\x46\xcd\x63\xcc\xe6\x7f\x1b\x00\xfd\x34\xd9\xa9\xe4\x82\x8d\xfa\x0a\x36\xca\x4d\xe2\x0e\xc6\x62\xa6\x25\xf4\xbb\xb6\xfb\xf9\x9c\x07\x43\xcd\xc7\xce\xaa\x07\xa8\xb5\xe8\x5c\xfa\xfc\xbd\x43\x73\xde\xe3\x11\xfd\x0a\x6e\xbe\x18\xad\x69\x93\x65\xdb\xe4\x5f\x00\x00\x00\xff\xff\xb0\xb3\x0e\x8b\x31\x05\x00\x00")

func assetsJsAppJsxBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAppJsx,
		"assets/js/app.jsx",
	)
}

func assetsJsAppJsx() (*asset, error) {
	bytes, err := assetsJsAppJsxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/app.jsx", size: 1329, mode: os.FileMode(420), modTime: time.Unix(1515278380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/js/app.jsx": assetsJsAppJsx,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"app.jsx": &bintree{assetsJsAppJsx, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

