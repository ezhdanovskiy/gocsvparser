// Code generated by go-bindata.
// sources:
// assets/js/app.jsx
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsJsAppJsx = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\xfe\x2e\xd2\x87\x44\xbc\x37\x92\x2e\x09\x0a\xa4\x48\xd0\x20\x3e\x16\x45\xc1\x88\xdb\x98\xa8\x2d\x2a\xe4\x2a\x88\x21\xe8\xdd\x0b\xfe\x88\x92\x7f\x1a\x07\x01\xec\x93\x76\xb5\x9c\xdd\xa1\x66\xd6\x8c\xc1\xe5\xff\x97\xf0\x8d\xbf\xf2\x65\xad\x65\x4b\x36\x4c\x92\xa4\x5e\x73\x63\xe0\x01\xb5\x51\xcd\x2d\xe1\x06\xf0\x8d\xb0\x11\x06\x1e\x91\xd7\x94\x5f\xab\x4d\xab\x1a\x6c\x08\xfa\x04\x40\x63\x23\x50\xa7\x99\x0b\x6c\x48\x9d\x6e\x20\x75\x01\x40\x41\xba\x0a\x8f\x36\x10\x15\xf4\xb4\x92\x26\x6f\xb5\x6a\x4d\x2e\xc5\xe0\xf2\x8c\xc4\x3b\x55\xbf\xa5\x36\x34\x9c\xaa\x5a\x73\x5b\xb4\x53\x55\xb0\xb1\x7b\x76\x95\x00\x0c\xc9\x30\x72\xbb\x91\x35\x49\xd5\x70\xbd\x3d\x2b\x3f\xa3\x3a\x5d\xe3\xaf\x9a\x13\x3e\x2b\xbd\xfd\x08\xd9\xf1\x88\x6a\x48\xf3\x9a\x94\x3e\x49\x7c\x86\x7e\xaa\x72\x06\x7a\xba\x76\xb3\xc1\xe6\xe3\x37\xfa\x80\xaa\x5d\xe3\x9d\x34\xf4\xee\x6d\xd6\xaa\x31\xa4\x3b\x3b\x43\xea\x1a\x8d\xf7\x6a\xba\x16\xc7\xd4\x95\xcb\xb8\x61\x0c\x71\x42\x28\xa1\x87\xd6\x35\xf8\x02\x3f\x7e\xc2\xe0\x7b\x3b\xb8\x00\x7e\x23\xc5\xbd\xea\x1a\x8a\xdf\xc9\x9f\x46\xfd\x8a\xfa\x11\x5f\x3a\x34\x04\x65\x20\xc1\xdf\xa4\x32\x91\x79\xfe\x8c\x94\x2e\x98\x87\x5f\x64\x53\x9e\x56\xd8\xa4\xa9\x46\xd3\xad\x29\x83\xb2\x0a\xc0\xe1\x17\xf0\x69\x69\x07\x4c\xa7\xf1\x7c\x7d\x2e\x38\x71\x18\x02\x13\xfb\x1b\xb2\x38\xf4\x9e\xa2\xdc\x95\x84\xf3\x50\xce\x68\xe7\x3e\x97\x6f\x78\x9b\xa6\xad\x73\xe3\x05\xc8\x9d\x51\xf6\xd4\x08\x50\xcc\x5c\xfb\x07\xb7\x65\x2f\x07\x90\xa2\xec\xfd\xf1\xfc\x56\x0c\xe0\xec\x14\x33\x5f\xbd\xb9\xac\x7b\x62\xee\xce\x59\x89\x8d\x1f\x3d\xb0\xb0\x0c\x8e\x5a\x40\xc8\xd7\xb9\x90\xf8\xd3\x1a\xab\x82\x9e\x94\xd8\x56\xb3\x1b\xb3\x4e\x29\x68\x55\xdd\x8a\x82\xd1\xca\x3d\xba\xde\x31\xb2\x5d\x7d\xc0\xe6\xa6\x02\xe8\xfd\x3d\x0c\x53\x0f\xe6\xd1\x0b\xe6\x9b\x25\x51\x9d\x71\x94\x7f\x1b\xfe\x4c\xf2\x14\xb1\xc1\xd9\x24\x3a\xb5\xf8\xbc\x4c\xe7\x63\x7e\x56\xaa\x13\xc6\xae\x5c\xa7\xbc\x97\xac\x24\xdc\x9c\x16\xec\xde\x2a\x0e\xa2\x8d\xef\xf7\x56\x68\xd9\x5b\xd4\xb0\x25\xaf\xc7\xcd\x77\x50\x1d\x17\xdd\x6e\xfd\xb4\xff\xe2\x89\x3d\xe0\xfa\x00\xf2\x00\xab\x3e\x86\xe2\xb7\x65\xac\x08\xbb\xf3\x4c\x16\x5a\xee\xb0\x8f\x06\x5a\xee\x91\x8c\x2f\x0e\x2a\x8f\xd5\xf8\x99\x8f\x1b\x70\xfa\xb2\x9f\x34\x21\x63\xde\x6e\x37\xdf\xef\xf3\xa0\x29\xbb\xaa\xc6\xbf\x0c\x56\x5d\x80\x50\x75\x67\x27\xc8\x5f\x3a\xd4\xdb\x25\xae\xd1\xb9\x70\xf1\x9f\x56\x8a\x16\x59\x76\x95\x1c\x22\x4c\xda\xf9\x18\xc2\xdf\x00\x00\x00\xff\xff\x7e\x3d\x80\x0e\xf1\x08\x00\x00")

func assetsJsAppJsxBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAppJsx,
		"assets/js/app.jsx",
	)
}

func assetsJsAppJsx() (*asset, error) {
	bytes, err := assetsJsAppJsxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/app.jsx", size: 2289, mode: os.FileMode(420), modTime: time.Unix(1515168167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/js/app.jsx": assetsJsAppJsx,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"app.jsx": &bintree{assetsJsAppJsx, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

